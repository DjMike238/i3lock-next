#!/usr/bin/env python3

from sys import argv, getdefaultencoding
from os import urandom, remove

from atexit import register
from random import getrandbits
from struct import unpack
from subprocess import run, PIPE

# PREFIX and LIBDIR are set during installation of i3lock-next
PREFIX = "/usr/local"
LIBDIR = "/lib"

# display help text then exit (on -h or --help flags as arg 1
if len(argv) > 1 and argv[1] in {'-h', '--help'}:
    print('\n'.join([
        'Usage: i3lock-next [-h|--help] [prompt] [font] [size]',
        '',
        'Options:',
        '    -h, --help  Display this help text.',
        '',
        '    prompt      Prompt string to display, default is none.',
        '',
        '    font        Font to to use, default is Sans.',
        '',
        '    size        Size of font, default is 18.'
        ]))

# set user-defined parameters or use default
prompt = argv[1] if len(argv) > 1 else ''
font = argv[2] if len(argv) > 2 else 'Sans'
size = int(argv[3]) if len(argv) > 3 else 18

font_i3lock = font # save this for later

# find user-defined font
font = run(['fc-match', font, '-f' '%{file}'], stdout=PIPE)
font = font.stdout.decode(getdefaultencoding())

# define name for screenshot taken with i3lock-next-helper
random = int.from_bytes(urandom(4), byteorder='little')
image = '/tmp/tmp.%d.png' % (random)

# make sure image is always deleted on exit
register(lambda f: remove(f), image)

# call i3lock-next-helper
# variables to keep lines < 72 characters
helper = '%s%s/i3lock-next/i3lock-next-helper' % (PREFIX, LIBDIR)
font = '%s/%d' % (font, size)
color = run([helper, image, font, prompt], stdout=PIPE)
color = color.stdout.decode(getdefaultencoding())

# get image size
with open(image, 'rb') as image_file:
    w, h = unpack('>LL', image_file.read()[16:24])

# get lock size and other color
if color == 'FFFFFFFF':
    lock = 'lock-light'
    other_color = '000000FF'
else:
    lock = 'lock-dark'
    other_color = '000000FF'

lock = '%s/share/i3lock-next/%s.png' % (PREFIX, lock)
with open(lock, 'rb') as lock_file:
    lock_w, lock_h = unpack('>LL', lock_file.read()[16:24])

# calculate appropriate ring radius
radius = int(1.1 * ((float((lock_w ** 2 + lock_h ** 2) / 2)) ** 0.5))

# call i3lock (should have i3lock-color installed)
#  - prompt color is managed by i3lock-next-helper
#  - with options -e and -n so i3lock-color ignores empty passwords
#    and doesn't fork
color = color.rstrip()
font_i3lock = font_i3lock.rstrip()
other_color = other_color.rstrip()
run([
    'i3lock', '-n', '-e', '--force-clock',
    '--timepos=%d-cw:%d-ch' % (w, h),
    '--timecolor=%s' % (color),
    '--timefont=%s' % (font_i3lock),
    '--timesize=%d' % (size * 2),
    '--datecolor=%s' % (color),
    '--datefont=%s' % (font_i3lock),
    '--datesize=%d' % (size),
    '--textcolor=00000000', 
    '--linecolor=00000000',
    '--keyhlcolor=%s80' % (color[:-2]),
    '--separatorcolor=22222260',
    '--insidecolor=%s1c' % (color[:-2]),
    '--insidevercolor=%s1c' % (other_color[:-2]),
    '--insidewrongcolor=%s1c' % (other_color[:-2]),
    '--radius=%d' % (radius),
    '--ringcolor=%s1c' % (color[:-2]),
    '--ringvercolor=ffffff00',
    '--ringwrongcolor=%s55' % (other_color[:-2]),
    '-i%s' % (image)
    ])
print('\n')
print([
    'i3lock', '-n', '-e', '--force-clock',
    '--timepos=%d-cw:%d-ch' % (w, h),
    '--timecolor=%s' % (color),
    '--timefont=%s' % (font_i3lock),
    '--timesize=%d' % (size * 2),
    '--datecolor=%s' % (color),
    '--datefont=%s' % (font_i3lock),
    '--datesize=%d' % (size),
    '--textcolor=00000000', 
    '--linecolor=00000000',
    '--keyhlcolor=%s80' % (color[:-2]),
    '--separatorcolor=22222260',
    '--insidecolor=%s1c' % (color[:-2]),
    '--insidevercolor=%s1c' % (other_color[:-2]),
    '--insidewrongcolor=%s1c' % (other_color[:-2]),
    '--radius=%d' % (radius),
    '--ringcolor=%s1c' % (color[:-2]),
    '--ringvercolor=ffffff00',
    '--ringwrongcolor=%s55' % (other_color[:-2]),
    '-i%s' % (image)
    ])
